//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
int CountSubsetsWithSum(vector<int> &arr, int n, int sum) {

	 vector<vector<int>> t(n+1, vector<int>(sum+1, 0));
	t[0][0]=1;

	for (int i = 1; i <= n; i++) {
		for (int j = 0; j <= sum; j++) {
			if (arr[i - 1] <= j)
				t[i][j] = (t[i - 1][j - arr[i - 1]] + t[i - 1][j])%1000000007;
			else
				t[i][j] = t[i - 1][j];
		}
	}

	return t[n][sum];
}

int countPartitions( int n, int d,vector<int> &arr) {
	int sumOfArray = 0;
	for (int i = 0; i < n; i++)
		sumOfArray += arr[i];

	if ((sumOfArray + d) % 2 != 0)
		return 0;
	else
		return CountSubsetsWithSum(arr, n, (sumOfArray + d) / 2);
}
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, d;
        cin >> n >> d;
        vector<int> arr;

        for (int i = 0; i < n; ++i) {
            int x;
            cin >> x;
            arr.push_back(x);
        }

        Solution obj;
        cout << obj.countPartitions(n, d, arr) << "\n";
    }
    return 0;
}
// } Driver Code Ends
