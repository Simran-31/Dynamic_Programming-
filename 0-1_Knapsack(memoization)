int knapsack(int wt[],int val[],int W,int n){
  //base case
  if(n==0||W==0){
  return 0;
  }
  if(t[n][W]!=-1){
  return t[n][W];
  }
  //rec case
  if(wt[n-1]<=W){
  return max(val[n-1]+knapsack(wt,val,W-wt[n-1],n-1),knapsack(wt,val,W,n-1));
  }
  else if(wt[n-1]>W){
  return knapsack(wt,val,W,n-1);
  }
}
int main(){
memset(t,-1,sizeof (t));
int val[]={1,3,4,5};
int wt[]={1,4,5,7};
int W=7;
int n=sizeof(n)/sizeof(val[0]);
cout<<knapsack(wt,val,W,n)<<endl;
return 0;
}
